import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { authMiddleware } from '@/middleware/auth';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error("Missing Supabase environment variables");
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

export async function GET(request: Request) {
  const authResponse = await authMiddleware(request);
  if (authResponse.status !== 200) return authResponse;

  try {
    const user = (request as any).user;

    // Parse query parameters
    const { searchParams } = new URL(request.url);
    const startDateParam = searchParams.get('startDate');
    const endDateParam = searchParams.get('endDate');

    let startDate: Date;
    let endDate: Date;

    if (startDateParam && endDateParam) {
      startDate = new Date(startDateParam);
      endDate = new Date(endDateParam);
    } else {
      // Default to the next 7 days
      startDate = new Date();
      endDate = new Date();
      endDate.setDate(endDate.getDate() + 7);
    }

    // Fetch the latest workout plan for the user
    const { data: workoutPlan, error: workoutPlanError } = await supabase
      .from('workout_plans')
      .select('*')
      .eq('user_id', user.id)
      .gte('start_date', startDate.toISOString())
      .lte('end_date', endDate.toISOString())
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (workoutPlanError) {
      if (workoutPlanError.code === 'PGRST116') {
        return NextResponse.json({ error: 'Workout plan not found' }, { status: 404 });
      }
      return NextResponse.json({ error: 'Failed to fetch workout plan' }, { status: 500 });
    }

    // Fetch daily workouts associated with the workout plan
    const { data: dailyWorkouts, error: dailyWorkoutsError } = await supabase
      .from('daily_workouts')
      .select('*')
      .eq('workout_plan_id', workoutPlan.id);

    if (dailyWorkoutsError) {
      return NextResponse.json({ error: dailyWorkoutsError.message }, { status: 500 });
    }

    // Fetch exercises for each daily workout
    const workoutsWithExercises = await Promise.all(
      dailyWorkouts.map(async (dailyWorkout) => {
        const { data: exercises, error: exercisesError } = await supabase
          .from('exercises')
          .select('*')
          .eq('daily_workout_id', dailyWorkout.id);

        if (exercisesError) throw new Error(exercisesError.message);

        return {
          ...dailyWorkout,
          exercises,
        };
      })
    );

    // Format the response to match the structure generated by the AI tool
    const response = {
      startDate: workoutPlan.start_date,
      endDate: workoutPlan.end_date,
      workoutGoal: workoutPlan.goal,
      workoutPlan: workoutsWithExercises.map(dailyWorkout => ({
        day: dailyWorkout.date,
        summary: dailyWorkout.summary,
        duration: dailyWorkout.duration,
        caloriesBurned: dailyWorkout.calories_burned,
        workoutType: dailyWorkout.workout_type,
        exercises: dailyWorkout.exercises.map((exercise: { 
          name: string; 
          sets: number; 
          reps: number; 
          duration?: number; 
          weight?: number; 
          rest_time?: number; 
          completed?: boolean; 
          difficulty?: string; 
        }) => ({
          name: exercise.name,
          sets: exercise.sets,
          reps: exercise.reps,
          duration: exercise.duration,
          weight: exercise.weight,
          restTime: exercise.rest_time,
          completed: exercise.completed,
          exerciseDifficulty: exercise.difficulty,
        })),
      })),
    };

    return NextResponse.json(response);
  } catch (error) {
    console.error('Error fetching workout plan:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}